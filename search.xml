<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS中JSON 类型 —— 数据的迭代]]></title>
    <url>%2F2019%2F08%2F10%2FJSON%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[JS 中 JSON 类型—— 数据的迭代0. 什么是JSON？​ JSON是JavaScript Object Notation的缩写，它是一种数据交换格式。尽管JSON是JavaScript的一个子集，但JSON是独立于语言的文本格式，JSON 数据格式与语言无关，脱胎自JavaScript，但目前很多编程语言都支持JSON 格式数据的生成和解析（维基）。 1. json类型的数据​ JavaScript中，json类型的数据，有两种形式，一种是数组形式，另一种是对象形式 注意：json 与 js对象的区别 A. 为了统一解析，JSON的字符串规定必须用双引号&quot;&quot;，Object的键也必须用双引号&quot;&quot; B. JSON键值对中的值不能为方法、函数/undefined/NaN 数组形式用下标来定位元素，数组内的元素是对象形式的json数据 1234json1 = [ &#123;"key1":"value1"&#125;, &#123;"key2":"value2"&#125;] ​ 数组格式的json的迭代，可以使用js数组的遍历和迭代函数实现。 12345678910111213141516171819202122232425// 1.数组形式json_array = [ &#123;"key1":"value1"&#125;, &#123;"key2": [ &#123;"key21": "value21"&#125;, &#123;"key22": "value22"&#125; ] &#125;,]// 1）for infor (let key in json_array)&#123; console.log(key,json_array[key])&#125;// 2) for offor (let item of json_array)&#123; console.log(item)&#125;// 3) forEachjson_array.forEach(item=&gt; console.log(item)) 对象形式 1234567json2 = &#123; &quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:[ &#123;&quot;key21&quot;: &quot;value21&quot;&#125;, &#123;&quot;key22&quot;: &quot;value22&quot;&#125; ]&#125; ​ 对象格式的json的迭代，可以使用js对象的遍历方式实现。 12345678910111213141516171819202122232425262728// 2.对象形式json_obj = &#123; "key1":"value1", "key2":[ &#123;"key21": "value21"&#125;, &#123;"key22": "value22"&#125; ]&#125;// 1) for infor(let i in json_obj)&#123; console.log(i,json_obj[i])&#125;// 2) Object.keysObject.keys(json_obj).forEach(key=&gt;&#123; console.log(key,json_obj[key])&#125;)// 3) Reflect.ownKeysReflect.ownKeys(json_obj).forEach(key=&gt;&#123; console.log(key,json_obj[key])&#125;)// 4) Object.getOwnPropertynamesObject.getOwnPropertyNames(json_obj).forEach(key=&gt;&#123; console.log(key,json_obj[key])&#125;) 思考 — 若对象形式的json数据，存在多级嵌套，则用递归处理 综合两种形式和嵌套的json迭代函数——json_iteration 12345678910json_iteration = function(json)&#123; for(let key in json)&#123; if (typeof(json[key]) == 'object') &#123; json_iteration(json[key]) &#125; else&#123; console.log(key,json[key]) &#125; &#125;&#125;]]></content>
      <tags>
        <tag>Front End</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo]]></title>
    <url>%2F2019%2F04%2F22%2FHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo 搭建个人博客什么是 Hexo？​ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 在本地安装Hexo框架安装前提​ 在安装Hexo前，必须检查电脑中是否已安装下列应用程序（请自行Google，查询安装方法）： Node.js Git 安装Hexo使用 npm 安装 Hexo 12# 安装 Hexo 提供的脚手架 hexo-cli$ npm install -g hexo-cli 初始化Hexo初始化博客（此处命名为MyBlog，读者可以任意） 123456# 初始化$ hexo init MyBlog$ cd MyBlog# 安装依赖$ npm install 此时， blog文件下的目录如下： 1234567.├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes 运行1234# 启动博客$ hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 浏览器查看在浏览器中打开 http://localhost:4000 ，页面呈现Hexo 默认主题的博客站点。 Hexo 常用命令1234567891011$ hexo new &quot;MyBlog&quot; # hexo n$ hexo publish # hexo p$ hexo generate # hexo g 生成静态网页$ hexo deploy # hexo d 开始部署$ hexo server # hexo s # Hexo 会监视文件变动并自动更新，无须重启服务器$ hexo server -s # 静态模式$ hexo server -p 8000 # 更改8000端口$ hexo server -i 192.168.1.0 # 定义 IP$ hexo clean # 清除缓存，网页正常情况下可以忽略此条命令 参考资料Hexo 官方文档]]></content>
      <tags>
        <tag>Front End</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端小白入门]]></title>
    <url>%2F2019%2F04%2F02%2F%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[[TOC] 前端小白入门0. 前言前端开发入门学习有：HTML、CSS、JavaScript（简称JS） 三个部分。一个基本的网站可以由多个网页组成，一个基本的网页由HTML CSS和JavaScript组成，也即结构层(HTML)、表示层(CSS)、行为层(Javascript)。 1. 简介(1) HTML（超文本标记语言 Hyper Text Markup Language）HTML 是用来描述网页的一种语言。它通过标记符号来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（比如文字如何处理，画面如何安排，图片如何显示等）。浏览器按顺序阅读网页文件，然后根据标记符解释和显示其标记的内容. (2) CSS(层叠样式表 Cascading Style Sheets)样式表定义如何显示 HTML 元素，就像 HTML的字体标签和颜色属性所起的作用那样。样式通常保存在外部的 .css 文件中。通过仅仅编辑一个简单的 CSS 文档，外部样式表使你有能力同时改变站点中所有页面的布局和外观。 (3) JS( JavaScript)Javascript是一种基于对象(Object)和事件驱动(Event Driven)并具有安全性能的脚本语言。使用它的目的是与HTML超文本标记语言、Java脚本语言(Java小程序)一起实现在一个Web页面中链接多个对象，与Web客户交互作用。例如可以设置鼠标悬停效果，在客户端验证表单，创建定制的HTML页面，显示警告框，设置cookie等等。 (4) 联系简单来说（不严谨），Html就是框架，就是一个房子的顶梁柱，CSS就是刷墙的颜料，美化HTML，JavaScript是让HTML更生动，更好看，让网页会动起来（比如图片滚动） 2. 学习路线个人经验，学习前端的路线应该是Html(Html5)—&gt; CSS(CSS3)—&gt;JS—&gt;Jquery，由浅入深。学打好基础，学好html和css基础，再学JS（要求先掌握基本语法，再学应用，有点难，必须深入学习） 以下是个人觉得入门阶段应该熟练掌握的基础技能： HTML4，HTML5语法、标签、语义（基础） CSS2.1，CSS3规范，与HTML结合实现各种布局、效果（基础） 一个成熟的客户端javascript库，推荐jquery 一门服务器端语言：如果有服务器端开发经验，使用已经会的语言即可，如果没有服务器端开发经验，熟悉Java可以选择Servlet，不熟悉的可以选PHP，能实现简单登陆注册功能就足够支持前端开发了，后续可能需要继续学习，最基本要求是实现简单的功能模拟， HTTP 比较好的在线学习资源有 W3School 和 菜鸟教程，当然阅读官方文档学习是更好的选择 本文在此对HTML、CSS、JS的学习进行粗略介绍。 3. HTML HTML文档的后缀名 .html .htm Html的入门学习包括 Html文档结构，头部标签，文本标签，表格标签，超链接标签，图像标签，HTML5音频、视频标签，HTML5绘图标签，框架标签（不需重点学习），&lt; div &gt;标签，颜色设置，绝对路径和相对路径。 简单例子 12345678910111213141516171819&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;前端小白&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;我的第一个标题&lt;/h1&gt; &lt;p&gt;我的第一个段落。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 4. CSS CSS文件的后缀名 .css CSS的定义分类 CSS的定义可以直接放在HTML元素的标签中，称为内联样式。其形式如下： 1&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt; CSS的定义可以放在HTML文件的 &lt;style&gt; 标签中，称为内部样式表。其形式如下： 1&lt;head&gt;&lt;style&gt;body&#123;background-color:yellow;&#125;&lt;/style&gt; &lt;/head&gt; CSS的定义也可以独立保存在一个扩展名为 .css的文件中，通过链接的方式包含在网页中，称为外部样式表。其形式如下： 1&lt;head&gt;&lt;link rel=stylesheet type=&quot;text/css&quot; href=&quot;foo.css&quot;&gt;&lt;/head&gt; CSS的入门学习包括 选择符，CSS的层叠性与优先次序，CSS文本属性，CSS表格属性，CSS的盒子模型和网页布局方式（定位功能和定位方式）。 5. JS JS文件的后缀名 .js JS的基本语法 必须掌握：常量和变量，数据类型，表达式和运算符，两种语句（循环和条件）以及最重要的函数。 CSS的入门学习包括 基本语法，面向对象特性（类和对象，内置对象，异常处理），在浏览器的应用（浏览器对象，JS在DOM中的应用方式，事件驱动和界面交互，JS在html5的应用等等。 6. 基本开发工具好用的工具能有效提高学习效率，将重点放在知识本身，在出现问题时能快速定位并解决问题，以下是个人觉得必备的前端开发工具： 文本编辑器：推荐Sublime Text，支持各种插件、主题、设置，使用方便，当然notepad++，VScode等也是不错的选择。 浏览器：推荐Google Chrome，更新快，对前端各种标准提供了非常好的支持 调试工具：推荐Chrome自带的Chrome develop tools（F12），可以轻松查看DOM结构、样式，通过控制台输出调试信息，调试javascript，查看网络等 辅助工具：PhotoShop编辑图片、取色，fireworks量尺寸，AlloyDesigner对比尺寸，以及前面的到的Chrome develop tools（另学） 7. 后言学习方法 入门阶段反复阅读经典书籍的中文版，书籍中的每一个例子都动手实现并在浏览器中查看效果（不喜欢看书籍的直接第二步） 在具备一定基础之后可以上网搜各种教程（包括视频教程，比如慕课网，网易云课堂）、demo，了解各种功能的实际用法和常见功能的实现方法 阅读HTML，CSS，JavaScript标准全面完善知识点 阅读前端牛人的博客、文章提升对知识的理解 善用搜索引擎（Google最好）]]></content>
      <tags>
        <tag>Front End</tag>
      </tags>
  </entry>
</search>
